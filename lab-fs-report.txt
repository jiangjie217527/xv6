这次lab花费了很长的时间，大多数时间用在找bug上，因为写的过程中出现了好多bug

# bigfile

这个task相对简单一些，但是也遇到了如下的问题并解决

1. 在处理大文件时，需要的 block cache也比较多，之前 block cache 是采用 hash 的办法，每个桶装满了就会panic，当时一个桶的大小比较小， 就会不适用当前的情况。所以我的解决方案是减少桶的数量，而增加单个桶的大小（总cache有上限）
2. 能写完这个bigfile，但是无法正确读取，这是因为代码中bin和bn写错了

# symlink

这个 task 非常麻烦，遇到了如下的问题并解决

1. 在创建symlink的时候，本来想使用跟bigfile中差不多的方式创建inode，但是后来发现有封装好的create，就尽量用封装的了
2. 在创建symlnik的时候，path和target容易写反了
3. 创建symlink是否要考虑要创建的链接文件已存在，这取决于create的实现。保险起见单独写了
4. 在open的时候本来想把访问过的path都存下来，每次访问的时候和之前访问过的比较一下来判断有没有环，但是发现kernel里用不了字符串比较的函数，就放弃了
5. 在open的时候遇到了死锁，打开文件的时候卡在锁的地方，后来发现在创建的时候，create里面就把锁get了，创建完需要自己unlock
6. 在open的时候遇到了无法begin_op(),找遍整个文件没看到哪里缺end_op,后来发现是在open需要循环的时候退出忘了